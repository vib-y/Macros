--// Regular working booster
repeat task.wait() until game:IsLoaded()
task.wait(3)
setfpscap(15)

local Team = {
    "thejustas",
    "standsonlinemar"
}

local FullTeam = {
    "thejustas",
    "standsonlinemar",

    "Evil_LittleLizard",
    "TeamKengunAssets"
}

local Team2 = {
    "getsbands",
    "Eyeleventh",
    "4erify"
}

local FullTeam2 = {
    "getsbands",
    "Eyeleventh",
    "4erify",

    "WingsOfDoomB",
    "FluwuffyVibe",
    "WingsOfDoomC"
}

local SecondPass = true
local TenPlayers = true
local HighestPosition = Team[1]

local Task = "Shooting"
local State = 1
local PlaceId = 8026790371

local Players = game:GetService("Players")
local RobloxReplicatedStorage = game:GetService("RobloxReplicatedStorage")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeleportService = game:GetService("TeleportService")
local GuiService = game:GetService("GuiService")
local Player = Players.LocalPlayer
local CurrentTime = 0

local ServerType = RobloxReplicatedStorage.GetServerType:InvokeServer()
print("Ran", ServerType)

--game:GetService("TeleportService"):Teleport(8026790371)
if game.PlaceId ~= PlaceId then
    TeleportService:Teleport(PlaceId)
    return
end

local VirtualUser = cloneref(game:GetService("VirtualUser"))
Players.LocalPlayer.Idled:Connect(function()
    VirtualUser:CaptureController()
	VirtualUser:ClickButton2(Vector2.new())
end)

GuiService.ErrorMessageChanged:Connect(function()
    Player:Kick("Rejoining ERROR MESSAGE")
    TeleportService:Teleport(PlaceId)
end)

if ServerType ~= "ReservedServer" then
    if table.find(Team, Player.Name) or table.find(Team2, Player.Name) or TenPlayers then
        --task.wait(1)
        if Player.Name == FullTeam2[4] then
            task.wait(25)
        end
    else
        task.wait(35)
    end

    if GuiService:GetErrorCode() == Enum.ConnectionError.DisconnectLuaKick or GuiService:GetErrorCode() == Enum.ConnectionError.TeleportFailure then
        Player:Kick("Joined NEPSERVERS")
        TeleportService:Teleport(PlaceId)
    else
         RobloxReplicatedStorage.ContactListIrisInviteTeleport:FireServer(game.PlaceId,"","usm3Vj28dWWsv0OkEZMO996k07rpx05ep+yUOoCNecXjGW/eAQAAAA2")
    end
    return
else
    Player.PlayerGui["Loading.Ui"].Enabled = false
    Player.PlayerGui["ServerInfo.Ui"].Enabled = true
    Player.Character.HumanoidRootPart.CFrame = workspace.Detectors.Gameplay.Plaza.CFrame
    print("Load")

    if workspace.Map:FindFirstChild("Scenery") then
        workspace.Map.Scenery:Destroy()
    end

    if ReplicatedStorage.ServerShutdown.Value == true and (GuiService:GetErrorCode() == Enum.ConnectionError.DisconnectLuaKick or GuiService:GetErrorCode() == Enum.ConnectionError.TeleportFailure) then
        TeleportService:Teleport(PlaceId) -- Special Case
        return
    end
end

local Court --= workspace.Twos["Court 6"]

if table.find(FullTeam, Player.Name) then
    Court = workspace.Twos["Court 6"]
elseif table.find(FullTeam2, Player.Name) then
    Court = workspace.Threes["Court 4"]
else
    return
end

local function CheckQueue(PlayerName)
    for i,v in pairs(Court.teams.queued:GetChildren()) do
        if v.Value == PlayerName then
            return true
        end
    end
    return false
end

local function JoinMatch()
    if table.find(Team, Player.Name) and (CurrentTime < 900 or TenPlayers) then

        Player.Character.PrimaryPart.CFrame = Court.pads.team1.join.CFrame
        task.wait(.5)
        if Player.Name ~= Team[1] then
            repeat task.wait(1) until Court.teams.queued.team1queued1.Value ~= ""
            ReplicatedStorage.action:InvokeServer("join:solo", Court.pads.team1.join, "team1")
        else
            ReplicatedStorage.action:InvokeServer("join:solo", Court.pads.team1.join, "team1")
        end
    else
        repeat task.wait(1) until Court.teams.queued.team1queued2.Value ~= ""
        Player.Character.PrimaryPart.CFrame = Court.pads.team2.join.CFrame
        task.wait(.5)
        ReplicatedStorage.action:InvokeServer("join:solo", Court.pads.team2.join, "team2")
    end
end

local function JoinMatchThrees()
    if table.find(Team2, Player.Name) and (CurrentTime < 900 or TenPlayers) then

        Player.Character.PrimaryPart.CFrame = Court.pads.team1.join.CFrame
        task.wait(.5)
        if Player.Name ~= Team2[1] then
            repeat task.wait(1) until Court.teams.queued.team1queued1.Value ~= ""
            ReplicatedStorage.action:InvokeServer("join:solo", Court.pads.team1.join, "team1")
        else
            ReplicatedStorage.action:InvokeServer("join:solo", Court.pads.team1.join, "team1")
        end
    else
        repeat task.wait(1) until Court.teams.queued.team1queued3.Value ~= ""
        Player.Character.PrimaryPart.CFrame = Court.pads.team2.join.CFrame
        task.wait(.5)
        ReplicatedStorage.action:InvokeServer("join:solo", Court.pads.team2.join, "team2")
    end
end

Player.PlayerGui["ServerInfo.Ui"].TopBarFrame.Holder.ServerInfo.UptimeBubble.Uptime.Heading:GetPropertyChangedSignal("Text"):Connect(function()
    local FalseTime = Player.PlayerGui["ServerInfo.Ui"].TopBarFrame.Holder.ServerInfo.UptimeBubble.Uptime.Heading.Text
    local numbersOnly = string.gsub(FalseTime, "%D", "")
    CurrentTime = tonumber(numbersOnly)
    if (ReplicatedStorage.ServerShutdown.Value == true and GuiService:GetErrorCode() == Enum.ConnectionError.DisconnectLuaKick) or (tonumber(numbersOnly) > 900 and not TenPlayers) then
        if not table.find(Team, Player.Name) then
            Player:Kick("Rejoining TimeMAXED")
            TeleportService:Teleport(PlaceId)
        else
            task.wait(35)
            Player:Kick("Rejoining TimeMAXED")
            TeleportService:Teleport(PlaceId)
        end
    end
end)

ReplicatedStorage.ServerShutdown:GetPropertyChangedSignal("Value"):Connect(function()
    if ReplicatedStorage.ServerShutdown.Value == true then
        Player:Kick("Rejoining SERVERSHUTDOWN")
        TeleportService:Teleport(PlaceId) -- Special Case
    end
end)

local Prevvalue = false
Court.values.Pause:GetPropertyChangedSignal("Value"):Connect(function()
    if Player.Backpack.InGame.Value == true then
        if Court.values.Pause.Value ~= Prevvalue then
            State = 1
            Prevvalue = Court.values.Pause.Value
        end
    end
end)

local function GetBall(BallName)
    for i,v in pairs(workspace.Balls:GetChildren()) do
        if v.Values.BallCourtName.Value == BallName then
            return v
        end
    end

    return false
end

local function hhmmss_to_seconds(hhmmss)
    local s = string.format("%06d", hhmmss) -- pad to 6 digits
    local hours = tonumber(string.sub(s, 1, 2))
    local minutes = tonumber(string.sub(s, 3, 4))
    local seconds = tonumber(string.sub(s, 5, 6))
    return hours * 3600 + minutes * 60 + seconds
end

local function is_between(hhmmss, start_hhmmss, end_hhmmss)
    local total_seconds = hhmmss_to_seconds(hhmmss)
    local start_seconds = hhmmss_to_seconds(start_hhmmss)
    local end_seconds = hhmmss_to_seconds(end_hhmmss)
    return total_seconds >= start_seconds and total_seconds <= end_seconds
end

function is_in_window(hhmmss)
    local total_seconds = hhmmss_to_seconds(hhmmss)
    local interval = 560 -- 9m30s
    local offset = total_seconds % interval
    return offset >= 0 and offset <= 45
end

--workspace.Balls.Ball.Values.BallCourtName.Value = "Court 6"
if table.find(FullTeam, Player.Name) then
    while task.wait(.3) do
        if not CheckQueue(Player.Name) and Player.Backpack.InGame.Value == false then
            JoinMatch()
            --print("Joining Match")
        elseif Player.Backpack.InGame.Value == true and Court.values.Pause.Value == false then
            --[[if ReplicatedStorage.PlayerStats[Player.Name].BadgeEXP["Defending_Rebounding"].Value <= 1000 then
                for i = 1, 251 do
                    ReplicatedStorage.PlayerEvents.Physical:FireServer(true, "Intercept")
                end
                print("Defending")
            end]]
            if Player.Character:FindFirstChild("BallConnect") and table.find(Team, Player.Name) then
                if Player.Name == Team[1] then
                    --Player.Character.PrimaryPart.CFrame = Players[Team[2]].Character.PrimaryPart.CFrame * CFrame.new(0,0,-1.5)
                    task.wait(.2)
                    ReplicatedStorage.PlayerEvents.Passing:FireServer("Pass", Players[Team[2]].Character, "Chest") -- Overhead
                elseif Player.Name == Team[2] and (State == 2 or SecondPass == false) then
                    Player.Character.PrimaryPart.CFrame = Court.spots.NoPress.CFrame * CFrame.new(0,-3.5,-2.3) * CFrame.Angles(0, math.rad(180), 0)
                    -- CFrame.new(0,-3.5,-2.1) 3pointshot -- CFrame.new(0,-3.5,22.5) -- rim -- CFrame.new(0,-3.5,12.5) LAY
                    task.wait(.175)
                    for i = 1, 18 do
                        --ReplicatedStorage.PlayerEvents.Shooting:FireServer(true, "Shooting", "Layup", "Up")
                        ReplicatedStorage.PlayerEvents.Shooting:FireServer(true, "Shooting", "Standing Shot")
                    end
                    --ReplicatedStorage.PlayerEvents.Shooting:FireServer(false, "Shooting", "Layup", "Up")
                    ReplicatedStorage.PlayerEvents.Shooting:FireServer(false, "Shooting", "Standing Shot")
                elseif Player.Name == Team[2] and State == 1 and SecondPass == true then
                    task.wait(.25)
                    ReplicatedStorage.PlayerEvents.Passing:FireServer("Pass", Players[Team[1]].Character, "Chest") -- Overhead
                    State = 2
                end
            elseif Player.Name == HighestPosition then
                local Distance = (Player.Character.PrimaryPart.Position - Court.spots.NoPress.Position).magnitude
                if Distance > 7 then
                    Player.Character.PrimaryPart.CFrame = Court.spots.NoPress.CFrame * CFrame.new(0,-3.5,2)
                end
            elseif Player.Character:FindFirstChild("BallConnect") and not table.find(Team, Player.Name) then
                if SecondPass then
                    ReplicatedStorage.PlayerEvents.Passing:FireServer("Pass", Players[Team[2]].Character, "Chest")
                else
                    ReplicatedStorage.PlayerEvents.Passing:FireServer("Pass", Players[Team[1]].Character, "Chest")
                end
            elseif not table.find(Team, Player.Name) then
                Player.Character.PrimaryPart.CFrame = Court.spots.NoPress.CFrame * CFrame.new(0,-3,-22)
            end
        end
    end
elseif table.find(FullTeam2, Player.Name) then
    while task.wait(.15) do
            local Success, Error = pcall(function()
            if not CheckQueue(Player.Name) and Player.Backpack.InGame.Value == false then
                JoinMatchThrees()
                --print("Joining Match")
            elseif Player.Backpack.InGame.Value == true and Court.values.Pause.Value == false then
                if Player.Character:FindFirstChild("BallConnect") and table.find(Team2, Player.Name) and Court.values.Shotclock.Value > 2 then
                    if ReplicatedStorage.PlayerStats[Team2[3]].BadgeEXP.Playmaking.Value <= 30 then
                        if Player.Name == Team2[1] then
                            ReplicatedStorage.PlayerEvents.Passing:FireServer("Pass", Players[Team2[2]].Character, "Handoff") 
                        elseif Player.Name == Team2[2]  then
                            ReplicatedStorage.PlayerEvents.Passing:FireServer("Pass", Players[Team2[3]].Character, "Handoff") 
                        elseif Player.Name == Team2[3] then
                            ReplicatedStorage.PlayerEvents.Passing:FireServer("Pass", Players[Team2[1]].Character, "Handoff") 
                        end
                    end
                elseif Player.Character:FindFirstChild("BallConnect") and table.find(Team2, Player.Name) and Court.values.Shotclock.Value <= 2 then
                    --ReplicatedStorage.PlayerEvents.Passing:FireServer("Pass", Players[FullTeam2[4]].Character, "Chest") 
                    --ReplicatedStorage.PlayerEvents.Dribbling:FireServer("DropBall")
                    Player.Character.PrimaryPart.CFrame = Court.spots.NoPress.CFrame * CFrame.new(0,-3,15)
                    task.wait(.175)
                    for i = 1, 18 do
                        --ReplicatedStorage.PlayerEvents.Shooting:FireServer(true, "Shooting", "Layup", "Up")
                        ReplicatedStorage.PlayerEvents.Shooting:FireServer(true, "Shooting", "Standing Shot")
                    end
                    --ReplicatedStorage.PlayerEvents.Shooting:FireServer(false, "Shooting", "Layup", "Up")
                    ReplicatedStorage.PlayerEvents.Shooting:FireServer(false, "Shooting", "Standing Shot")
                elseif Player.Character:FindFirstChild("BallConnect") and not table.find(Team2, Player.Name) then
                    local Distance = (Player.Character.PrimaryPart.Position - Court.spots.NoPress.Position).magnitude
                    if Distance > 10 then
                        Player.Character.PrimaryPart.CFrame = Court.spots.NoPress.CFrame * CFrame.new(0,-3,2.5)
                        task.wait(.3)
                    end
                    if ReplicatedStorage.PlayerStats[Team2[3]].BadgeEXP.Playmaking.Value <= 500 then
                        ReplicatedStorage.PlayerEvents.Passing:FireServer("Pass", Players[Team2[1]].Character, "Chest")
                    end
                elseif table.find(Team2, Player.Name) then
                    if ReplicatedStorage.PlayerStats[Player.Name].BadgeEXP["Defending_Rebounding"].Value <= 1000 then
                        for i = 1, 251 do
                            ReplicatedStorage.PlayerEvents.Physical:FireServer(true, "Intercept")
                        end
                        print("Defending")
                    end
                    local Distance = (Court.spots.team1[table.find(Team2, Player.Name)].Position - Player.Character.PrimaryPart.Position).magnitude
                    if Distance > 15 then
                        task.wait(1)
                        Player.Character.PrimaryPart.CFrame = Court.spots.team1[table.find(Team2, Player.Name)].CFrame
                        task.wait(.5)
                    end
                elseif not table.find(Team2, Player.Name) then
                    if ReplicatedStorage.PlayerStats[Team2[3]].BadgeEXP.Playmaking.Value >= 30 or Player.Name ~= FullTeam2[4] then
                        --Player.Character.PrimaryPart.CFrame = Court.OOBS.OOB1.CFrame * CFrame.new(3,5,1)

                        if not is_in_window(CurrentTime) then
                            TeleportService:Teleport(PlaceId)
                        end
                    end
                    local Distance = (Player.Character.PrimaryPart.Position - Court.spots.NoPress.Position).magnitude
                    if Distance > 10 then
                        Player.Character.PrimaryPart.CFrame = Court.spots.NoPress.CFrame * CFrame.new(0,-3,2.5)
                        task.wait(.5)
                    end

                    --[[local CurrentBall = GetBall("Court 4")

                    if CurrentBall then
                        if CurrentBall.Values.InUse.Value == false then
                            repeat
                                Player.Character.PrimaryPart.CFrame = CFrame.new(CurrentBall.Position) * CFrame.new(0,2.5,0)
                                task.wait(.05)
                            until Player.Character:FindFirstChild("BallConnect")
                        end
                    end]]
                end
            elseif Player.Backpack.InGame.Value == true and Court.values.Pause.Value == true and Court.values.Calls.Value == "Inbound" and ReplicatedStorage.PlayerStats[Team2[3]].BadgeEXP.Playmaking.Value < 30 then
                if Court.values.Calls.Calls2.Value == "Team1" and Player.Name == Team2[1] then
                    Player.Character.PrimaryPart.CFrame = Court.tempObjects.IB.Protection.CFrame * CFrame.new(0,3,0)
                    task.wait(2.5)
                    if Player.Character:FindFirstChild("BallConnect") then
                        ReplicatedStorage.PlayerEvents.Passing:FireServer("Pass", Players[Team2[2]].Character, "Chest") 
                        task.wait(.75)
                        Player.Character.PrimaryPart.CFrame = Court.spots.team1[table.find(Team2, Player.Name)].CFrame
                    end
                elseif Court.values.Calls.Calls2.Value == "Team2" and Player.Name == FullTeam2[4] then
                    Player.Character.PrimaryPart.CFrame = Court.tempObjects.IB.Protection.CFrame * CFrame.new(0,3,0)
                    task.wait(2.5)
                    if Player.Character:FindFirstChild("BallConnect") then
                        ReplicatedStorage.PlayerEvents.Passing:FireServer("Pass", Players[Team2[1]].Character, "Chest") 
                    end
                end
            elseif Player.Backpack.InGame.Value == true and Court.values.Pause.Value == true and ReplicatedStorage.PlayerStats[Team2[3]].BadgeEXP.Playmaking.Value >= 30 then
                if not table.find(Team2, Player.Name) then
                    TeleportService:Teleport(PlaceId)
                end
            end
        end)
        if Error then
            print(Error)
        end
    end
end
